<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Shubham Omprakash Patil</title>
    <link>https://shubhamomprakashpatil.github.io/portfolio/post/</link>
    <description>Recent content in Projects on Shubham Omprakash Patil</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Mar 2017 12:00:00 -0500</lastBuildDate><atom:link href="https://shubhamomprakashpatil.github.io/portfolio/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Model Predictive Control and Image Classification</title>
      <link>https://shubhamomprakashpatil.github.io/portfolio/post/project-2/</link>
      <pubDate>Wed, 15 Sep 2021 11:00:59 -0400</pubDate>
      
      <guid>https://shubhamomprakashpatil.github.io/portfolio/post/project-2/</guid>
      <description>Problem Statement (MPC): In this project, an F1 vehicle is subjected to a Miami race-track consisting of randomly generated obstacles in its course. The defined vehicle is bounded by speed and steering angle constraints, with a goal to complete the track in minimum time and avoid all the random obstacles. The vehicle can detect an obstacle within a range of 250 m.
Problem Statement (Image Classification): From the given dataset of 10,000 images comprising of 22 classes, develop an image classification model with an accuracy of more than 45%.</description>
    </item>
    
    <item>
      <title>Prioritised Experience Replay</title>
      <link>https://shubhamomprakashpatil.github.io/portfolio/post/project-1/</link>
      <pubDate>Sun, 01 Aug 2021 10:58:08 -0400</pubDate>
      
      <guid>https://shubhamomprakashpatil.github.io/portfolio/post/project-1/</guid>
      <description>In this project, uniform experience replay is applied using a deep Q-network, in which transitions are uniformly sampled from the agentsâ€™ replay memory.
In the latter part, proportional prioritization is applied to replay the transitions that are categorized as more important, at a higher frequency. Prioritization gives a more robust and effective learning system.
Following is the network architecture implemented in PyTorch using novel agent and Q-Table classes.
 GitHub Repository</description>
    </item>
    
  </channel>
</rss>
